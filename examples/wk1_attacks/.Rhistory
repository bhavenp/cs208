yeast.clust <- kmeans(yeast[, - ncol(yeast)], 2)
yeast.clust
sum(yeast.clust$cluster==1)
sum(yeast.clust$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=1)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=5)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=20)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=1000)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.cluster.vs.label <- table(yeast.clust$cluster, yeast[,c("ribosomal")])
yeast.cluster.vs.label
yeast.knn <- knn.cv(k=5,cl=yeast[,c("ribosomal")],train=yeast[,-ncol(yeast)])
yeast.knn.table <- table(yeast.knn,yeast[,c("ribosomal")])
yeast.knn.table
genotenureitis <-read.arff("http://bmi214.stanford.edu/files/a2/genotenureitus1.arff")
summary(genotenureitis)
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ''irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != "irep"]
summary(genotenureitis)
summary(genotenureitis.filtered)
rules <- apriori(genotenureitis.filtered,
parameter=list(supp=0.5,
conf=0.9,
target="rules",
maxlen=4))
summary(rules)
my.subset <- subset(rules,subset=confidence == 1 & support > 0.8)
summary(my.subset)
inspect(my.subset)
inspect(my.subset)
cross.validation(genotenureitis.filtered,'gotgrants',gain.ratio)
cross.validation(genotenureitis.filtered,'gotgrants',chi.squared)
cross.validation(genotenureitis.filtered,'gotgrants',information.gain)
cross.validation(genotenureitis.filtered,'gotgrants',symmetrical.uncertainty)
cross.validation(genotenureitis.filtered,'pctdrivel',gain.ratio)
cross.validation(genotenureitis.filtered,'pctdrivel',chi.squared)
cross.validation(genotenureitis.filtered,'pctdrivel',information.gain)
cross.validation(genotenureitis.filtered,'pctdrivel',symmetrical.uncertainty)
cross.validation(leukemia,"",zeroR)
table(predict(nb.fit,leukemia[,names(leukemia)!="leukemia_type"]),
leukemia[,c("leukemia_type")])
nb.fit <- naiveBayes(leukemia[,names(leukemia)!="leukemia_type"],
leukemia[,c("leukemia_type")])
require(class)
require(ROCR)
require(e1071)
require(FSelector)
require(foreign)
require(arules)
nb.fit <- naiveBayes(leukemia[,names(leukemia)!="leukemia_type"],
leukemia[,c("leukemia_type")])
table(predict(nb.fit,leukemia[,names(leukemia)!="leukemia_type"]),
leukemia[,c("leukemia_type")])
require(e1071)
require(FSelector)
featureData<-read.csv("~/Desktop/Bhaven/Stanford/Senior/BIOMEDIN\ 214_CS274/a3/features.csv")
print(head(featureData))
set.seed(1028)
trainingRows <- sample(1:nrow(featureData),nrow(featureData)*.8)
testingRows <- which(!c(1:nrow(featureData)) %in% trainingRows)
nb.fit <- naiveBayes(SITE~., data=featureData[trainingRows,])
print(table(predict(nb.fit,featureData[testingRows,names(featureData)!="SITE"]),
featureData[testingRows,"SITE"]))
#Examine the information gain
info.gain <- information.gain("SITE ~ .", featureData)
#Rank the attributes by information gain
info.gain.ordered <- data.frame("Attribute importance"=info.gain[order(
-info.gain$attr_importance),], "Name"=
rownames(info.gain)[order(-info.gain$attr_importance)])
#Examine the attributes
print(info.gain.ordered)
clear
clear()
248 + 21 - 1 - 8 * 4 / 2
x <- 2; y <- 4
x + y
ls
rm(list=ls(all=TRUE))
x <- 2; y <- 4
x + y
x <- 1:3 # :
y <- seq(1, 3, by = 1) # seq is a sequence
z <- c(x, y)
c(c(x, x), x)
class(z)
is.numeric(z)
is.numeric(x)
z[1:4]
w <- c('hi', 'hello')
c(z, w)
is.numeric(w)
z > 2
class(z > 2)
is.logical(z > 2)
z[z>2]
z
z[1] <- 20
z
z[1] # now 20
z
z[1] <- NA # special keyword for missing element
is.na(z[1]) # TRUE
z
names(z) <- c('first', 'second', 'third',
'fourth', 'fifth', 'sixth')
z['first'] # still NA
z[!is.na(z)]
z[is.na(z)] <- 0
z
length(z) # should be 6
# sort vector
sort(z) # puts 20 at end
z[order(z)] # alternative
gender <- c(rep("male",20), rep("female", 30))
class(gender)
gender <- factor(gender)
gender
levels(gender)
summary(gender)
class(gender)
gender <- as.character(gender)
class(gender)
m1 <- matrix(1, nrow=3, ncol=3) # create 3 by 3 zero matrix
m2 <- matrix(2, nrow=3, ncol=3) # create 3 by 3 zero matrix
m1
m2
m <- rbind(m1, m2)
m
m <- cbind(m, m)
m
# check dimensions of matrix, now 6 by 6
nrow(m)
ncol(m)
dim(m)
# get transpose of m
t(m)
m1[1,] # select first row
m1[, 1] # select first column
m1[1, ] <- 3 # change all first row to ones
m1
rownames(m1) <- c('first', 'second', 'third')
m1['first', ]
x <- list(a = c(1,2,3), b = c('d', 'e', 'f'), # provide name and data
c = "foo", d = list(e = 1:4, f = 'bar')) # even nested list possible
names(x)
authors <- data.frame(surname = c("Tukey", "Venables", "Tierney", "Ripley", "McNeil"),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)), stringsAsFactors = F)
authors
authors[1:3, 1:2] # index by number
authors$surname # or by name with $
head(authors)
summary(authors)
authors[order(authors$surname),]
authors[authors$nationality == 'US',]
table(authors$nationality)
books <- data.frame(name = c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core"),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"), stringsAsFactors = F)
books
author_and_books <- merge(authors, books, by.x = "surname", by.y = "name")
author_and_books
author_and_books[author_and_books$deceased == 'yes', ]
mat <- matrix(c(1,3,2,6,5,4), ncol = 2)
mat
means <- rep(0, nrow(mat))
for (i in 1:nrow(mat)) {
# mean is a function that calculates mean of vector
means[i] <- mean(mat[i,])
}
for (i in 1:nrow(mat)) {
# mean is a function that calculates mean of vector
means[i] <- mean(mat[i,])
}
means
apply(mat, MARGIN = 1, FUN = mean)
apply(mat, 2, sum)
apply(mat, 1, function(x){ min(x)*2 })
rowMeans(mat)
colMeans(mat)
x <- c(3,5, -2, 4)
median(x)
sum(x)
min(x)
max(x)
sd(x) #Standard Deviation
var(x) #Variance
sqrt(x) #square root
if (5 > 2) print("5 is greater than 2")
if (5 < 10 & 6 < 10) print("Yes")
if(5 < 10 & 6 > 10) print("Yes")
if(5 < 10 | 6 > 10) print("Yes, at least one condition is TRUE") # | means OR
TRUE & TRUE
TRUE & FALSE
TRUE | FALSE
stderr <- function(x) {
sqrt(var(x)/length(x)) # returned value since last line
}
stderr(1:20) # run function on vector 1:20
getwd()
setwd()
authors
write.table(authors, file = "authors.csv", sep = ",",
write.table(authors, file = "authors.csv", sep = ",",
col.names = T, row.names = F, quote = F)
write.table(authors, file = "authors.csv", sep = ",",
col.names = T, row.names = F, quote = F)
read.table(file = "authors.csv", sep = ",", header = TRUE)
example_object <- list(a = list(a = 1),
b = list(c = c(2,3)),
c = 'hi')
example_object <- list(a = list(a = 1),
b = list(c = c(2,3)),
c = 'hi')
example_object
install.packages('ggplot2')
library(ggplot2) # load ggplot2
data <- data.frame(log_normal = rlnorm(1000))
ggplot(data, aes(x = log_normal)) +
geom_density() # creates a simple density plot
ggplot(data, aes(x = log_normal)) +
geom_density() # creates a simple density plot
data <- data.frame(log_normal = rlnorm(1000))
ggplot(data, aes(x = log_normal)) +
geom_density() # creates a simple density plot
install.packages('reshape')
library(reshape)
data$chisq <- rchisq(1000, df = 1)
head(data)
summary(data)
melted_data <- melt(data)
head(melted_data)
head(melted_data[melted_data$variable == 'chisq',])
ggplot(melted_data, aes(x = value, fill = variable)) +
geom_density(alpha = 0.4) # alpha is the opacity
rm(list=ls())
setwd("~/Box Sync/Bhaven's Externally Shareable Files/CRISPR Screens/Kinome_library Brie/")
x <- read.csv("~/Box\ Sync/Bhaven\'s\ Externally\ Shareable\ Files/CRISPR\ screens/Kinome\ library_Brie/Mouse\ Kinome\ list_Brie.csv")
View(x)
size(unique(x$Target.Gene.Symbol))
length(unique(x$Target.Gene.Symbol))
x <- matrix(c(0, 456195, 19, 313612), nrow = 2, ncol = 2)
View(x)
fisher.test(x)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "l")
fisher.test(x, alternative = "g")
x <- matrix(c(14, 457917, 20, 124363), nrow = 2, ncol = 2)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "g")
x <- matrix(c(0, 457917, 5, 124363), nrow = 2, ncol = 2)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "l")
x <- matrix(c(155, 104170, 38, 208561), nrow = 2, ncol = 2)
View(x)
fisher.test(x, alternative = "l")
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "g")
x <- matrix(c( 38, 208561, 155, 104170), nrow = 2, ncol = 2)
fisher.test(x, alternative = "g")
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "l")
View(x)
x <- matrix(c( 23, 200, 1, 100), nrow = 2, ncol = 2)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "g")
fisher.test(x, alternative = "l")
x <- matrix(c( 23, 1, 200, 100), nrow = 2, ncol = 2)
View(x)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "g")
x <- matrix(c( 1, 100, 23, 200), nrow = 2, ncol = 2)
fisher.test(x, alternative = "t")
x <- matrix(c( 15, 100, 5, 200), nrow = 2, ncol = 2)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "l")
fisher.test(x, alternative = "g")
x <- matrix(c( 22, 104170, 4, 208561), nrow = 2, ncol = 2)
fisher.test(x, alternative = "t")
fisher.test(x, alternative = "l")
fisher.test(x, alternative = "g")
View(x)
i=2
print("hello")
print("hello"^i)
print("hello","^i")
paste("x"^toString(i))
paste("x"^"i")
expression(paste("x"^"i"))
paste("x", "3")
paste("x", "3", sep="")
paste("x", "^3", sep="")
paste("x", ^"3", sep="")
paste("x"^"3", sep="")
paste("x"^3, sep="")
expression(paste("x"^3, sep=""))
paste("x","^","3", sep="")
parse(text = "x^2")
expression(paste("4"^"th"))
print(expression(paste("4"^"th")))
paste("4"^"th")
expression(paste("4"^toString(i)))
expression(paste("4"^(toString(i)))
)
expression("4"^(toString(i))
)
expression("sin" * phi, "cos" * phi)
paste(i)
paste(i^2)
paste(i,toString(^2))
paste(i,toString(2))
expression(10^*toString(i))
expression(10^toString(i))
expression(10^(toString(i)))
expression(10,^(toString(i)))
expression("10",^(toString(i)))
matrix <- as.matrix(c(15,457917,73,415420))
View(matrix)
matrix <- as.matrix(c(15,457917,73,415420),nrow=2,ncol=2)
matrix <- as.matrix(c(15,457917,73,415420),nrow=2,ncol=2)
View(matrix)
matrix <- matrix(c(15,457917,73,415420),nrow=2,ncol=2)
View(matrix)
fisher.test(matrix,alternative = "greater")
fisher.test(matrix,alternative = "two.sided")
fisher.test(matrix,alternative = "less")
matrix <- matrix(c(16,457917,2,415420),nrow=2,ncol=2)
fisher.test(matrix,alternative = "less")
fisher.test(matrix,alternative = "greater")
matrix <- matrix(c(15,457917,73,415420),nrow=2,ncol=2)
fisher.test(matrix,alternative = "less")
fisher.test(matrix,alternative = "two.sided")
pos_bot10 <- read.table(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Scripts/Post_Screen_Analysis/Scatter_plots/Swan plots/Genome_Pos_3T3_Bot10_combined_mageck_LFCAll.gene_summary_Entrez.txt", header = T, stringsAsFactors = F, sep = "\t")
pos_bot10[pos_bot10$id == "Eya1", ]
pos_bot10[pos_bot10$id == "Six1", ]
pos_bot10[pos_bot10$Mouse_Entrez_ID == 14048, ]
pos_bot10[pos_bot10$Mouse_Entrez_ID == "14048", ]
pos_bot10[pos_bot10$Mouse_Entrez_ID == "24069", ]
pos_bot10[pos_bot10$Mouse_Entrez_ID == 24069, ]
hiSHH_bot10 <- read.table(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Scripts/Post_Screen_Analysis/Scatter_plots/Swan plots/Genome_Pos_3T3_Bot10_combined_mageck_LFCAll.gene_summary_Entrez.txt", header = T, stringsAsFactors = F, sep = "\t");
View(hiSHH_bot10)
pdcl3 <- hiSHH_bot10[hiSHH_bot10$Mouse_Entrez_ID == "68833", ];
View(pdcl3)
guides <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/170107 Genome_Pos_3T3_Sequencing/Genome_Pos_3T3_Bot10/Genome_Pos_3T3_Bot10_guide_enrichment_calculation.csv", header = T, stringsAsFactors = F)
View(guides)
pdcl3_guides <- guides[guides$Gene == "Pdcl3", ];
View(pdcl3_guides)
lipid_library <- read.csv(file = "~/Box Sync/Bhavens Externally Shareable Files/CRISPR screens/Lipid-Associated Proteins library/lipid_modifying_enzyme_guides_with_flanking_seqs_GP edited_BP_editted_FINAL.csv", header = T, stringsAsFactors = F);
View(lipid_library)
lipidGenes <- length(unique(lipid_library$Entrez.ID))
ubiq_library <- read.csv(file = "~/Box Sync/Bhavens Externally Shareable Files/CRISPR screens/Ubiquitin and Deubiquitinase library/ubiquitin_related_guides_with_flanking_seqs_BP_editted_FINAL.csv", header = T, stringsAsFactors = F);
ubiqGenes <- length(unique(ubiq_library$Entrez.ID));
ubiqGenes <- unique(ubiq_library$Gene.Symbol); #1211 genes
ubiqGenes <- as.data.frame(unique(ubiq_library$Gene.Symbol)); #1211 genes
View(ubiqGenes)
ubiqGenes <- as.data.frame(unique(ubiq_library$Entrez.ID)); #1211 genes
View(ubiqGenes)
proteins <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_protein/mouse_protein_seq.csv")
proteins <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_protein/mouse_protein_seq.csv", header = T, stringsAsFactors = F)
View(proteins)
pdcl <- proteins[proteins$Mouse_Gene_Symbol == "Pdcl", ]
View(pdcl)
pdcl$Protein_Seq[1] == pdcl$Protein_Seq[2]
pdcl$Protein_Seq[1] == pdcl$Protein_Seq[3]
pdcl$Protein_Seq[1] == pdcl$Protein_Seq[2]
rnaseq <- read.csv(file = "Box Sync/Bhavens Externally Shareable Files/Osmo_Project/02 RNAseq/Results/RNAseq Partek Data/TransposedData.csv")
View(rnaseq)
install.packages(Bioconductor)
install.packages("Bioconductor")
source("https://bioconductor.org/biocLite.R")
biocLite()
library("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
mgiGene <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_with_Orthologs_v2.csv", header = T, stringsAsFactors = F);
dups <- which(duplicated(mgiGene$Mouse_Gene_Symbol));
dup_symbols <- mgiGene$Mouse_Gene_Symbol[dups];
dup_entries <- mgiGene[mgiGene$Mouse_Gene_Symbol %in% dup_symbols, ];
View(dup_entries)
mgiGene <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_with_Orthologs_v2.csv", header = T, stringsAsFactors = F);
mgi_IDs <- unique(mgiGene$MGI_ID);
newList <- read.table(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/180307_MGI_EntrezGene.txt", header = F, stringsAsFactors = F)
mgiGene <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_with_Orthologs_v2.csv", header = T, stringsAsFactors = F);
mgi_IDs <- unique(mgiGene$MGI_ID);
rm(list=ls());
mgiGene <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_with_Orthologs_v2.csv", header = T, stringsAsFactors = F);
mgi_IDs <- unique(mgiGene$MGI_ID);
dups <- which(duplicated(mgiGene$Mouse_Gene_Symbol));
dup_symbols <- mgiGene$Mouse_Gene_Symbol[dups];
dup_entries <- mgiGene[mgiGene$Mouse_Gene_Symbol %in% dup_symbols, ];
newList <- read.table(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_Database_with_Orthologs_v4.csv", header = F, stringsAsFactors = F)
#QC the new database
newList <- read.table(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_Database_with_Orthologs_v4.csv", header = F, stringsAsFactors = F)
#QC the new database
newList <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_Database_with_Orthologs_v4.csv", header = F, stringsAsFactors = F)
View(newList)
#QC the new database
newList <- read.csv(file = "/Volumes/G-DRIVE slim/CRISPR Screens/Mouse_gene_info/Mouse_genes/MGI_to_Entrez_Database_with_Orthologs_v4.csv", header = T, stringsAsFactors = F)
mgi_IDs <- unique(newList$Mouse_Gene_Symbol);
dups <- which(duplicated(newList$Mouse_Gene_Symbol));
dup_symbols <- newList$Mouse_Gene_Symbol[dups];
dup_entries <- newList[newList$Mouse_Gene_Symbol %in% dup_symbols, ];
View(dup_entries)
install.packages("Seurat")
R.version
setwd("/Volumes/G-DRIVE slim/Osmo_screens/Scripts/");
rm(list=ls());
#look at Kinome Sorbitol screens
sorbitol_Top5 <- read.table(file = "/Volumes/G-DRIVE slim/Osmo_screens/171220_IMCD3_Kinome_Sorbitol_screen/Kinome_Sorbitol_Top5_combined/Kinome_Sorbitol_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
setwd("/Volumes/G-DRIVE slim/Osmo_screens/Scripts/");
rm(list=ls());
setwd("/Volumes/G-DRIVE slim/Osmo_screens/Scripts/");
rm(list=ls());
#look at Kinome Sorbitol screens
sorbitol_Top5 <- read.table(file = "~/Box Sync/Bhavens Externally Shareable Files/Osmo_Project/01 Screens/01 Kinome_IMCD3/Kinome_results/Kinome_Sorbitol_screen/Kinome_Sorbitol_Top5_combined/Kinome_Sorbitol_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
sorb_top5_oxsr1 <- sorbitol_Top5[sorbitol_Top5$Gene == "Oxsr1", ];
setwd("/Volumes/G-DRIVE slim/Osmo_screens/Scripts/");
rm(list=ls());
#look at Kinome Sorbitol screens
kinome_sorbitol_Top5 <- read.table(file = "~/Box Sync/Bhavens Externally Shareable Files/Osmo_Project/01 Screens/01 Kinome_IMCD3/Kinome_results/Kinome_Sorbitol_screen/Kinome_Sorbitol_Top5_combined/Kinome_Sorbitol_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
kinome_top5_oxsr1 <- sorbitol_Top5[sorbitol_Top5$Gene == "Oxsr1", ];
gw_top5_oxsr1 <- gw_top5[gw_top5$Gene == "Oxsr1", ];
#look at GW screens
gw_top5 <- read.table(file = "~/Box Sync/Bhavens Externally Shareable Files/Osmo_Project/01 Screens/02 Brie Genome_IMCD3/Genome_results/Genome_Sorbitol_NaCl_Top5_combined/Genome_Sorbitol_NaCl_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
gw_top5_oxsr1 <- gw_top5[gw_top5$Gene == "Oxsr1", ];
rm(list=ls());
#look at Kinome Sorbitol screens
kinome_sorbitol_Top5 <- read.table(file = "~/Box Sync/Bhavens Externally Shareable Files/Osmo_Project/01 Screens/01 Kinome_IMCD3/Kinome_results/Kinome_Sorbitol_screen/Kinome_Sorbitol_Top5_combined/Kinome_Sorbitol_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
kinome_top5_oxsr1 <- sorbitol_Top5[sorbitol_Top5$Gene == "Oxsr1", ];
rm(list=ls());
#look at Kinome Sorbitol screens
kinome_sorbitol_Top5 <- read.table(file = "~/Box Sync/Bhavens Externally Shareable Files/Osmo_Project/01 Screens/01 Kinome_IMCD3/Kinome_results/Kinome_Sorbitol_screen/Kinome_Sorbitol_Top5_combined/Kinome_Sorbitol_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
kinome_top5_oxsr1 <- kinome_sorbitol_Top5[kinome_sorbitol_Top5$Gene == "Oxsr1", ];
#look at GW screens
gw_top5 <- read.table(file = "~/Box Sync/Bhavens Externally Shareable Files/Osmo_Project/01 Screens/02 Brie Genome_IMCD3/Genome_results/Genome_Sorbitol_NaCl_Top5_combined/Genome_Sorbitol_NaCl_Top5_combined_mageck_LFCAll.sgrna_summary.txt", header = T, stringsAsFactors = F);
gw_top5_oxsr1 <- gw_top5[gw_top5$Gene == "Oxsr1", ];
View(gw_top5_oxsr1)
View(kinome_top5_oxsr1)
intersection <- kinome_top5_oxsr1[kinome_top5_oxsr1$sgrna %in% gw_top5_oxsr1$sgrna, ]
View(intersection)
```{r}
rm(list=ls());
require(Seurat);
require(Seurat);
#get the Susztak dataset Seurat object which is saved as "tiss"
load(file = "/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/Susztak_lab_Seurat_obj.Robj");
#scale the transcript counts to 10,000 molecules per cell and log-normalize
tiss <- NormalizeData(object = tiss, scale.factor = 1e4, normalization.method = "LogNormalize");
rm(list=ls());
load(file = "/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/from_scratch/Susztak_lab_Seurat_obj_norm_batch.Robj");
#identify the most variable genes by calculating the SD of expression for genes in bins based on mean expression. This occurs in 20 bins based on average expression
Sys.time();
tiss <- FindVariableGenes(object = tiss, num.bin = 20,  mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 0.3, y.cutoff = 0.5, do.plot = TRUE); #1037 variable genes
rm(list=ls());
load(file = "/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/from_scratch/Susztak_lab_Seurat_obj_norm_batch.Robj");
#identify the most variable genes by calculating the SD of expression for genes in bins based on mean expression. This occurs in 20 bins based on average expression
require(Seurat);
Sys.time();
tiss <- FindVariableGenes(object = tiss, num.bin = 20,  mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 0.3, y.cutoff = 0.5, do.plot = TRUE); #1037 variable genes
Sys.time();
#regress out the number of UMI using 2 cores for faster processing. Do this after finding highly variable genes, since these are what are used in the downstream analysis
tiss <- ScaleData(object = tiss, genes.use = tiss@var.genes, display.progress = T, vars.to.regress = "nUMI", do.par = T, num.cores = 2);
save(tiss, file="/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/from_scratch/Susztak_lab_Seurat_obj_norm_batch_fvg_scale.Robj");
rm(list = ls());
require(Seurat);
load(file="/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/from_scratch_v2/Susztak_lab_Seurat_obj_norm_batch_fvg_scale.Robj");
tiss <- RunPCA(object = tiss, pc.genes = tiss@var.genes, pcs.compute = 30, do.print = TRUE,
pcs.print = 1:5, genes.print = 5);
#plot standard deviations of the PCs to determin the number of PCs to use for cluster generation
PCElbowPlot(object = tiss, num.pc = 30);
# Set number of principal components.
n.pcs = 15;
# n.pcs = 20;
tiss <- RunTSNE(object = tiss, dims.use = 1:n.pcs, dim.embed = 2, seed.use = 10, perplexity=30, check_duplicates=F);
#plot TSNE
# note that you can set do.label=T to help label individual clusters
TSNEPlot(object = tiss, do.label = T, vector.friendly=T, png.file="TSNE_plot_15.png");
rm(list = ls());
require(Seurat);
load(file="/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/from_scratch_v2/Susztak_lab_Seurat_obj_norm_scale_fvg.Robj");
tiss <- RunPCA(object = tiss, pc.genes = tiss@var.genes, pcs.compute = 30, do.print = TRUE,
pcs.print = 1:5, genes.print = 5);
save(tiss, file="/Volumes/G-DRIVE slim/scRNAseq/comp_kidney_dataset/from_scratch_v2/Susztak_lab_Seurat_obj_norm_scale_fvg_pca.Robj");
#plot standard deviations of the PCs to determin the number of PCs to use for cluster generation
PCElbowPlot(object = tiss, num.pc = 30);
dir()
getwd()
setwd("~/Desktop/Bhaven/Harvard/Classes/CS208/cs208/examples/wk1_attacks/")
getwd()
dir()
source("regressionAttack.r")
source('~/Desktop/Bhaven/Harvard/Classes/CS208/cs208/examples/wk1_attacks/regressionAttack.r')
source('~/Desktop/Bhaven/Harvard/Classes/CS208/cs208/examples/wk1_attacks/regressionAttack.r')
